%% Warehouse AGV Simulation - Enhanced Version
figure;
hold on;
axis([0 55 0 55]); % Warehouse size
grid on;
title('Warehouse AGV Path Planning');
% == WAREHOUSE OBSTACLES ==
obstacles = {
[5 8 7 50]; % Left rack
[20 0 22 50]; % Middle rack
[35 0 37 50]; % Right rack
[0 15 48 17]; % Lower cross-aisle
[0 32 48 34]; % Upper cross-aisle
[0 0 48 2]; % Lower wall
[0 50 48 52]; % Upper wall
[12 25 14 29]; % Temporary pallet 1
[28 12 31 15]; % Temporary pallet 2
[28 4 31 8]; % Worker 3
[23 45 25 49]; % Worker 4
};
% Draw obstacles
for i = 1:length(obstacles)
obs = obstacles{i};
if i <= 7
fill([obs(1) obs(3) obs(3) obs(1)], [obs(2) obs(2) obs(4) obs(4)], 'k');
else
fill([obs(1) obs(3) obs(3) obs(1)], [obs(2) obs(2) obs(4) obs(4)], 'r');
end
end
% == START/GOAL ==
start = [1, 5];
goal = [45, 40];
% Start and goal as star markers
plot(start(1), start(2), 'g*', 'MarkerSize', 14, 'LineWidth', 2);
plot(goal(1), goal(2), 'r*', 'MarkerSize', 14, 'LineWidth', 2);
text(start(1), start(2)-2, 'LOADING ZONE', 'FontWeight', 'bold');
text(goal(1), goal(2)+2, 'PACKAGING', 'FontWeight', 'bold');
% == AGV PARAMETERS ==
agvRadius = 0.8; % for circular AGV
safetyMargin = 0.8;
robotSpeed = 0.4;
% == PATH PLANNING LOOP ==
robotPos = start;
path = plot(robotPos(1), robotPos(2), 'b-', 'LineWidth', 2);
robot = plot(robotPos(1), robotPos(2), 'bo', 'MarkerSize', 14, 'MarkerFaceColor', 'b');
while norm(robotPos - goal) > 1
moveDir = (goal - robotPos)/norm(goal - robotPos);
% Collision check
collision = false;
for lookAhead = 1:3
testPos = robotPos + lookAhead*robotSpeed*moveDir;
if checkCollision(testPos, 2*agvRadius + safetyMargin, obstacles)
collision = true;
break;
end
end
if collision
moveDir = [moveDir(2), -moveDir(1)];
end
robotPos = robotPos + robotSpeed*moveDir;
% Update path
set(path, 'XData', [get(path, 'XData') robotPos(1)], ...
'YData', [get(path, 'YData') robotPos(2)]);
% Update robot (as a circle)
set(robot, 'XData', robotPos(1), 'YData', robotPos(2));
if mod(floor(norm(robotPos)), 5) == 0
quiver(robotPos(1), robotPos(2), moveDir(1), moveDir(2), 0.5, 'b');
end
drawnow limitrate;
pause(0.05);
end
% Final Arrival Marker
plot(robotPos(1), robotPos(2), 'bp', 'MarkerSize', 15, 'MarkerFaceColor', 'b');
text(robotPos(1), robotPos(2)+1.5, 'ARRIVED', 'Color', 'b', 'FontWeight', 'bold');
% == Collision Function ==
function collision = checkCollision(pos, width, obstacles)
agvRect = [pos(1) - width/2, pos(2) - width/2, pos(1) + width/2, pos(2) + width/2];
collision = false;
for i = 1:length(obstacles)
obs = obstacles{i};
if agvRect(1) < obs(3) && agvRect(3) > obs(1) && ...
agvRect(2) < obs(4) && agvRect(4) > obs(2)
collision = true;
return;
end
end
end

